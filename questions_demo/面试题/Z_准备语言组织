

1.之前做过的项目：
----------------------------------------------------------
A.http请求方式发送消息
lvs：负载均衡层
目前是域名绑定到4台机器；同城双机房，马场一个，科学城一个；
4台机器部署nginx

B.你们的服务器是八核的？单机系统并发量是多少？
长连接并发量 还是 http短连接并发量

单纯的无数据请求单机100W/s http都可以
单纯长连接，长连接10万/S 没有问题
还要根据具体业务来划分

之前conn服务golang单机6万长连接
有时候也要看业务价值和优化价值；这个都是可以衡量的，取舍的。

比如业务要求功能实现要快，这种情况，其实可以先堆机器。当然单纯堆机器，肯定后面的优化会非常麻烦
这里也要取舍，比如数据库模块、缓存模块。数据迁移这个是非常麻烦的。

golang百万的协程4K java线程1M区别就非常大了哈

C.nginx url 分配到不用的请求
pns
weixing
sms
mail :这里的邮件服务是发送通知邮件，不涉及到附件传输这些；

pns：推送层、消费层、接入层;
消息队列redis list做的队列；mongdb做持久层

每条消息uid time msg 服务名称 做了记录保证消息的可达性
消息分级：不同等级的消息队列，用户中签新股，用户股票成交消息这些必须送达

D.最后有个到达率检查工具，定时任务期；？？？？(入口和出口来判定消息到达情况)
发送标记每条消息 201808170911_0000001 发送了到了消息接收推送层
消息到达这里会有回包，如果没有回包，表示消息丢失，需要重发。
当然这里出现过一个问题：
第三方推送，和自己推送，出现没收到；后面有收到了，手机没有上线；
后面上线，连续收到二条相同消息，有的延迟出现；时间挫变短。
后来统一策略；第三方推送，小米，华为，apns 以及自有消息推送；到达了，默认为已经发送出去了。

同时每条消息在手机小红点留痕，用户如果没有收到消息推送，小红点可以查看到消息。
这里的消息非常重要，可是消息全流程不可控，某种程度的妥协。
微信消息和我们这个不一样，微信是一直在线的，如果不在线，可以不推送；时效性没有证券的这么高


F.后来推出了智能推送：自有推送在线的情况下，优先自有推送；自有推送离线状态切换到第三方推送；

apns 苹果推送一直是这样哈,apns推送出现异常中断，后来发送网络现在；不知道是否防火墙的原因，
后来自己在国外搞了一台机器，没有发送限制；只好多部署几台机器，多部署服务，每个服务发送慢一点

三个版本：
1.nodes版本  1个核，1W个长连接每台机器。
2.golang版本
3.接入第三方安卓推送，小米，华为
4.智能推送；

这里设计到几个方面；上报的时效性，出现发送二条消息，第三方推送和自有推送同时上报。
跨机房的，上报服务在自有机房；接入层在腾讯云；

最开始设计，出现频繁的网络切换，导致自有通道和华为通道切换
apns uid 是否在线
hw uid   是否在线
xm uid 	是否在线
self uid 是否在线
会出现hw 和self同时在线的情况发生，这种情况下，优先发送自由通道。

架构设计抽象、分层、分而治之、演化
不过最开始架构也必须做到某种程度的设计，预留空间

快队列，慢队列（消费者svr多一些即可）

统计服务器比较简单，回包的时候，转发到mongdb


微信服务，这个服务主要也是通知功能；主要是公司官微，推送消息，这个主要是做了一个简单的接口转换器，把公司内部http接口翻译给微信接口； redis来做简单队列和消息推送一样，不过简单很多。

短信服务这里交易短信；设计的稍微复杂一些，因为有回执表读取。
定时读取回执表，重发，当然还要查看错误码；一键重发，这个交给运营人员来控制；是否重新发送给用户。
主备机房，通道自动切换；交易短信，国际短信，各种坑吧。

CMS系统中会有读取短信发送主状态；

和消息推送类似也是，消息队列来实现。

5W/S*10*3600=18万万条消息;
基本来说是够用的；实际redis消费的话，使用了10台分片;
这里也有事故报告机制，服务挂掉自动下线；nginx有检查机制。重新上线，需要人工复合。
----------------------------------------------------------
大数据数据推送：大数据是在大数据平台

内容标签，每个用户关注哪些类型股票；

----------------------------------------------------------
redis缓存
Java相关的面试都会问到缓存的问题，基础一点的会问到什么是“二八定律”、什么是“热数据和冷数据” ，复杂一点的会问到缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题，这些看似不常见的概念，都与我们的缓存服务器相关，一般常用的缓存服务器有Redis、Memcached等，而笔者目前最常用的也只有Redis这一种。

Redis为什么这么快
1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；
2、数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；
3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；
4、使用多路I/O复用模型，非阻塞IO；
5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；

官方FAQ表示，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了
这里我们一直在强调的单线程，只是在处理我们的网络请求的时候只有一个线程来处理，一个正式的Redis Server运行的时候肯定是不止一个线程的，这里需要大家明确的注意一下！例如Redis进行持久化的时候会以子进程或者子线程的方式执行


mysql数据库
mysql索引 mysql事务

mongdb数据库

mysql千万级别
mongdb 亿级别
redis 百亿级别

首先是内存映射机制，数据不是持久化到存储设备中的，而是暂时存储在内存中，这就提高了在IO上效率以及操作系统对存储介质之间的性能损耗。（毕竟内存读取最快）其次，NoSQL并不是不使用sql，只是不使用关系。没有关系的存在，就表示每个数据都好比是拥有一个单独的存储空间，然后一个聚集索引来指向。搜索性能一定会提高的。第三，语言。使用javascript语法进行操作更加高效、直接。这些是MongoDB针对关系型数据库的效率要高的原因。但是不能仅仅看重效率，这种数据库的设计带来的弊端也是有的。例如数据关系的维护会带来很多冗余数据、客户端代码需要大量针对数据库进行的IO操作、数据挖掘难以实现等等。

但MongoDB相比MySQL也有一些缺点:
不支持事务操作
占用空间过大
MongoDB没有如MySQL那样成熟的维护工具
无法进行关联表查询，不适用于关系多的数据
复杂聚合操作通过mapreduce创建，速度慢
模式自由，自由灵活的文件存储格式带来的数据错误

----------------------------------------------------------


监控平台、蛮简单的；graphite grafna配置预警
微信公众号告警平台；这个简单哈，http传输做了个传输层哈


--------------设计模式与数据机构算法
设计模式，使用了几种设计模式。 排序算法
单利模式，职责琏模式，工厂模式，观察者模式，模板模式，代理模式



2.关于spring mvc模式  mybaits
spring boot ioc 以及aop
java nio 模式原理
java jvm (https://www.cnblogs.com/williamjie/p/9493282.html)

3.关于推荐算法，或者说推荐整个流程

4.关于消息中间件，各种选型

4.关于框架、框架spring cloud  dubble  k8s 
各个原理以及缺点

service mesh  Istio


首要原则：
系统达到什么级别、比如可以服务降级、业务迭代和性能指标之间的权衡

架构需要根据不同业务场景来进行衡量、妥协、演化

前几年电商秒杀系统设计精要；


金融一个核心就是寻找价差、在过程中不停有人发现同样规律。
十年期，购买小市值股票，收益300%，年华30%；这几年再买的话，年化可能是-100%;

架构也是一样的演进的，商业模式不停的在变化，

电商模式;集中式的访问
O2O模式，需要解决的问题，可能是版本迭代，定位准确、计费结算核心功能
每一个系统首先要解决几个主要问题：



比如消息推送：
用户价值：
1.消息的传递，尽可能的快。用户接受到，做出决策；
2.消息的不丢失，知晓自己的操作等
3.给客户传递公司最新的产品，以及投资策略
公司价值：
1.推送有价值的消息传达给用户，运营人员只考虑拉新，不考虑用户屏蔽协助软件。
2.扩大公司品牌知名度，扩大用户基数，比较公司也是要盈利的。
3.运营价值

有可能是个政绩工程、或者是个重点工程；太多的不可控，能够控制的就是架构层面
后面就是资源协调：包括人力资源，产品资源、机器资源，测试资源，运维资源，网络资源，预算等等，人员还包括技术栈 、这里还包括，竞争对手，竞品，时间周期（非常重要）

张小龙的微信团队少一个月，被干掉；所以这里面太多要协调的东西了，反而写代码的确实是最简单幸福的工作。

还有包括技术选型：java技术栈以及包括golang 后续维护，演化过程

包括架构评审，最后选择开源还是自研，还是采购； 最后选择架构

再就是概要设计，尽可能的考虑到出现问题，避免出现半拉子工程或者遇到更大的坑。

包括后面的实现，完成后的功能测试，集成测试，压力测试。部署生产环境，生产环境事故，等等等资源协调。




个人价值：
1.实现自我价值、如果做得好当然报酬回报也会是有的。
2.技术提升，完成自己的情怀。


之前工作中最骄傲的是什么？最想改变的是什么？
整套架构体系都是我搭建的，升级提高了消息推送到达了，从30%得到90%左右；
docker化。
全链路消息推送渠道；包括消息推送，微信，短信，邮件等。
有机会实践自己关于架构设计方面的想法；

部署k8s上面，弹性扩容；




1.以前的工作经历和目前工作是否匹配
2.是否逻辑思维符合要求，沟通能力如何
3.是否合乎应聘部门老大喜好
4.比如掌握高深的技术为什么服务，基础平台部为其它工程师服务。业务工程师，可能考虑比较多的是业务场景。对于技术需求可能没那么深，当然如果有了解更加好。


老板
高层
中高层：快速推进业务开发，支撑业务部门CI/CD 平台战略
基础:拆解任务、维持任务； 稳定，高性能，弹性扩容
小兵:拆解了的任务，功能开发，高性能


能够占领市场:
1.满足用户需求？？？什么是用户想要的？？？
2.留住用户，用户更加愿意花钱。
3.竞争对手更多新功能，更加能够给用户创造价值

用户股票交易所有的事情，留存在我这边平台。如何实现这个目标？？？？？






































































